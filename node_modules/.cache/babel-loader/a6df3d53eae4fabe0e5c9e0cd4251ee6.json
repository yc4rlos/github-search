{"ast":null,"code":"var _jsxFileName = \"/home/yan/Documentos/Projects/github-search/src/providers/github-provider.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useCallback, useState } from 'react';\nimport api from '../Services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GithubContext = /*#__PURE__*/createContext({\n  user: {},\n  repositories: [],\n  starred: []\n});\n\nconst GithubProvider = ({\n  children\n}) => {\n  _s();\n\n  const [githubState, setGithubState] = useState({\n    loading: false,\n    user: {\n      login: undefined,\n      name: undefined,\n      html_url: undefined,\n      blog: undefined,\n      company: undefined,\n      location: undefined,\n      followers: 0,\n      following: 0,\n      public_gists: 0,\n      public_repos: 0\n    },\n    repositories: [],\n    starred: []\n  });\n\n  const getUser = username => {\n    api.get('/users/{username})').then(({\n      data\n    }) => {\n      setGithubState(prevState => ({ ...prevState,\n        user: {\n          login: data.login,\n          name: data.name,\n          html_url: data.html_url,\n          blog: data.blog,\n          company: data.company,\n          location: data.location,\n          followers: data.followers,\n          following: data.following,\n          public_gists: data.public_gists,\n          public_repos: data.public_repos\n        }\n      }));\n    });\n  };\n\n  const contextValue = {\n    githubState,\n    getUser: useCallback(username => getUser(username), [])\n  };\n  return /*#__PURE__*/_jsxDEV(GithubContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GithubProvider, \"gLcGLq1shScirxks37HRVVzDu/s=\");\n\n_c = GithubProvider;\nexport default GithubProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GithubProvider\");","map":{"version":3,"sources":["/home/yan/Documentos/Projects/github-search/src/providers/github-provider.js"],"names":["React","createContext","useCallback","useState","api","GithubContext","user","repositories","starred","GithubProvider","children","githubState","setGithubState","loading","login","undefined","name","html_url","blog","company","location","followers","following","public_gists","public_repos","getUser","username","get","then","data","prevState","contextValue"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,aAAf,EAA8BC,WAA9B,EAA0CC,QAA1C,QAAyD,OAAzD;AACA,OAAOC,GAAP,MAAgB,iBAAhB;;AAEA,OAAO,MAAMC,aAAa,gBAAGJ,aAAa,CAAC;AACvCK,EAAAA,IAAI,EAAC,EADkC;AAIvCC,EAAAA,YAAY,EAAE,EAJyB;AAKvCC,EAAAA,OAAO,EAAE;AAL8B,CAAD,CAAnC;;AAQP,MAAMC,cAAc,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAAA;;AACnC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC;AAC3CU,IAAAA,OAAO,EAAE,KADkC;AAE3CP,IAAAA,IAAI,EAAC;AACDQ,MAAAA,KAAK,EAAEC,SADN;AAEDC,MAAAA,IAAI,EAAED,SAFL;AAGDE,MAAAA,QAAQ,EAAEF,SAHT;AAIDG,MAAAA,IAAI,EAAEH,SAJL;AAKDI,MAAAA,OAAO,EAAEJ,SALR;AAMDK,MAAAA,QAAQ,EAACL,SANR;AAODM,MAAAA,SAAS,EAAE,CAPV;AAQDC,MAAAA,SAAS,EAAE,CARV;AASDC,MAAAA,YAAY,EAAE,CATb;AAUDC,MAAAA,YAAY,EAAE;AAVb,KAFsC;AAc3CjB,IAAAA,YAAY,EAAE,EAd6B;AAe3CC,IAAAA,OAAO,EAAE;AAfkC,GAAD,CAA9C;;AAkBA,QAAMiB,OAAO,GAAIC,QAAD,IAAc;AAC1BtB,IAAAA,GAAG,CAACuB,GAAJ,CAAQ,oBAAR,EAA8BC,IAA9B,CAAmC,CAAC;AAACC,MAAAA;AAAD,KAAD,KAC/B;AACIjB,MAAAA,cAAc,CAACkB,SAAS,KAAK,EAC7B,GAAGA,SAD0B;AAE7BxB,QAAAA,IAAI,EAAC;AACDQ,UAAAA,KAAK,EAAEe,IAAI,CAACf,KADX;AAEDE,UAAAA,IAAI,EAAEa,IAAI,CAACb,IAFV;AAGDC,UAAAA,QAAQ,EAAEY,IAAI,CAACZ,QAHd;AAIDC,UAAAA,IAAI,EAAEW,IAAI,CAACX,IAJV;AAKDC,UAAAA,OAAO,EAAEU,IAAI,CAACV,OALb;AAMDC,UAAAA,QAAQ,EAAES,IAAI,CAACT,QANd;AAODC,UAAAA,SAAS,EAAEQ,IAAI,CAACR,SAPf;AAQDC,UAAAA,SAAS,EAAEO,IAAI,CAACP,SARf;AASDC,UAAAA,YAAY,EAAEM,IAAI,CAACN,YATlB;AAUDC,UAAAA,YAAY,EAAEK,IAAI,CAACL;AAVlB;AAFwB,OAAL,CAAV,CAAd;AAeH,KAjBL;AAkBH,GAnBD;;AAoBA,QAAMO,YAAY,GAAG;AAChBpB,IAAAA,WADgB;AAEhBc,IAAAA,OAAO,EAAEvB,WAAW,CAAEwB,QAAD,IAAcD,OAAO,CAACC,QAAD,CAAtB,EAAkC,EAAlC;AAFJ,GAArB;AAIA,sBAEI,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAEK,YAA/B;AAAA,cACCrB;AADD;AAAA;AAAA;AAAA;AAAA,UAFJ;AAMH,CAjDD;;GAAMD,c;;KAAAA,c;AAmDN,eAAeA,cAAf","sourcesContent":["import React, {createContext, useCallback,useState} from 'react';\nimport api from '../Services/api'\n\nexport const GithubContext = createContext({\n    user:{\n        \n    },\n    repositories: [],\n    starred: [],\n});\n\nconst GithubProvider = ({children}) => {\n    const [githubState, setGithubState] = useState({ \n        loading: false,\n        user:{\n            login: undefined,\n            name: undefined,\n            html_url: undefined,\n            blog: undefined,\n            company: undefined,\n            location:undefined,\n            followers: 0,\n            following: 0,\n            public_gists: 0,\n            public_repos: 0,\n        },\n        repositories: [],\n        starred: [],\n    });\n\n    const getUser = (username) => {\n        api.get('/users/{username})').then(({data}) =>\n            {\n                setGithubState(prevState => ({\n                ...prevState,\n                user:{\n                    login: data.login,\n                    name: data.name,\n                    html_url: data.html_url,\n                    blog: data.blog,\n                    company: data.company,\n                    location: data.location,\n                    followers: data.followers,\n                    following: data.following,\n                    public_gists: data.public_gists,\n                    public_repos: data.public_repos,\n            },\n                }));\n            })\n    };\n    const contextValue = {\n         githubState,\n         getUser: useCallback((username) => getUser(username), []),\n    };\n    return(\n       \n        <GithubContext.Provider value={contextValue}> \n        {children}\n        </GithubContext.Provider>\n    )\n}\n\nexport default GithubProvider;"]},"metadata":{},"sourceType":"module"}