{"ast":null,"code":"var _jsxFileName = \"/home/yan/Documentos/Projects/github-search/src/Components/repositories/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport * as S from './styled';\nimport { RepositoryItem } from \"../index\";\nimport useGithub from \"../../Hooks/github-hooks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Repositories = () => {\n  _s();\n\n  const {\n    githubState,\n    getUserRepos\n  } = useGithub();\n  const [hasUserForSearchRepos, setHasUserForSearchRepos] = useState(false);\n  useEffect(() => {\n    if (!!githubState.user.login) {\n      getUserRepos();\n    }\n\n    setHasUserForSearchRepos(!!githubState.repositories);\n  }, [githubState.user.login]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: hasUserForSearchRepos ? /*#__PURE__*/_jsxDEV(S.Stabs, {\n      selectedTabClassName: \"is-selected\",\n      selectedTabPanelClassName: \"is-selected\",\n      children: [/*#__PURE__*/_jsxDEV(S.StabList, {\n        children: [/*#__PURE__*/_jsxDEV(S.Stab, {\n          children: \"Repositories\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(S.Stab, {\n          children: \"Starred\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(S.StabList, {\n        children: [/*#__PURE__*/_jsxDEV(S.StabPanel, {\n          children: githubState.repositories.map(item => /*#__PURE__*/_jsxDEV(RepositoryItem, {\n            name: \"Clone-Netflix\",\n            linkToRepo: \"https://github.com/R3SP31T4/CloneNetflix\",\n            fullname: \"R3SP31T4/CloneNetflix \"\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(S.StabPanel, {\n          children: [githubState.repositories.map(item => /*#__PURE__*/_jsxDEV(RepositoryItem, {\n            name: \"Clone-Netflix\",\n            linkToRepo: \"https://github.com/R3SP31T4/CloneNetflix\",\n            fullname: \"R3SP31T4/CloneNetflix \"\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 21\n          }, this)), /*#__PURE__*/_jsxDEV(RepositoryItem, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \" \"\n    }, void 0, false)\n  }, void 0, false);\n};\n\n_s(Repositories, \"izQG8XPt4IflOGkRbO62RqFWabk=\", false, function () {\n  return [useGithub];\n});\n\n_c = Repositories;\nexport default Repositories;\n\nvar _c;\n\n$RefreshReg$(_c, \"Repositories\");","map":{"version":3,"sources":["/home/yan/Documentos/Projects/github-search/src/Components/repositories/index.js"],"names":["React","useEffect","useState","S","RepositoryItem","useGithub","Repositories","githubState","getUserRepos","hasUserForSearchRepos","setHasUserForSearchRepos","user","login","repositories","map","item","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAO,KAAKC,CAAZ,MAAmB,UAAnB;AACA,SAASC,cAAT,QAA+B,UAA/B;AACA,OAAOC,SAAP,MAAsB,0BAAtB;;;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACvB,QAAM;AAACC,IAAAA,WAAD;AAAcC,IAAAA;AAAd,MAA8BH,SAAS,EAA7C;AACA,QAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDR,QAAQ,CAAC,KAAD,CAAlE;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAG,CAAC,CAACM,WAAW,CAACI,IAAZ,CAAiBC,KAAtB,EAA4B;AACxBJ,MAAAA,YAAY;AACf;;AACDE,IAAAA,wBAAwB,CAAC,CAAC,CAACH,WAAW,CAACM,YAAf,CAAxB;AACH,GALQ,EAKN,CAACN,WAAW,CAACI,IAAZ,CAAiBC,KAAlB,CALM,CAAT;AAMA,sBACI;AAAA,cACCH,qBAAqB,gBAClB,QAAC,CAAD,CAAG,KAAH;AAAS,MAAA,oBAAoB,EAAC,aAA9B;AAA4C,MAAA,yBAAyB,EAAC,aAAtE;AAAA,8BACI,QAAC,CAAD,CAAG,QAAH;AAAA,gCACI,QAAC,CAAD,CAAG,IAAH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,CAAD,CAAG,IAAH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI,QAAC,CAAD,CAAG,QAAH;AAAA,gCACI,QAAC,CAAD,CAAG,SAAH;AAAA,oBACCF,WAAW,CAACM,YAAZ,CAAyBC,GAAzB,CAA6BC,IAAI,iBAClC,QAAC,cAAD;AAEA,YAAA,IAAI,EAAC,eAFL;AAGA,YAAA,UAAU,EAAC,0CAHX;AAIA,YAAA,QAAQ,EAAC;AAJT,aACKA,IAAI,CAACC,EADV;AAAA;AAAA;AAAA;AAAA,kBADC;AADD;AAAA;AAAA;AAAA;AAAA,gBADJ,eAWI,QAAC,CAAD,CAAG,SAAH;AAAA,qBACCT,WAAW,CAACM,YAAZ,CAAyBC,GAAzB,CAA6BC,IAAI,iBAClC,QAAC,cAAD;AAEA,YAAA,IAAI,EAAC,eAFL;AAGA,YAAA,UAAU,EAAC,0CAHX;AAIA,YAAA,QAAQ,EAAC;AAJT,aACKA,IAAI,CAACC,EADV;AAAA;AAAA;AAAA;AAAA,kBADC,CADD,eASI,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,kBATJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADkB,gBA+BlB;AAAA;AAAA;AAhCJ,mBADJ;AAuCH,CAjDD;;GAAMV,Y;UACkCD,S;;;KADlCC,Y;AAkDN,eAAeA,YAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport * as S from './styled';\nimport { RepositoryItem } from \"../index\";\nimport useGithub from \"../../Hooks/github-hooks\";\n\nconst Repositories = () => {\n    const {githubState, getUserRepos} = useGithub();\n    const [hasUserForSearchRepos, setHasUserForSearchRepos] = useState(false);\n\n    useEffect(() => {\n        if(!!githubState.user.login){\n            getUserRepos();\n        }\n        setHasUserForSearchRepos(!!githubState.repositories);\n    }, [githubState.user.login]);\n    return (\n        <>\n        {hasUserForSearchRepos? (\n            <S.Stabs selectedTabClassName=\"is-selected\" selectedTabPanelClassName=\"is-selected\">\n                <S.StabList>\n                    <S.Stab>Repositories</S.Stab>\n                    <S.Stab>Starred</S.Stab>\n                </S.StabList>\n                <S.StabList>\n                    <S.StabPanel>\n                    {githubState.repositories.map(item => (\n                    <RepositoryItem \n                    key={item.id} \n                    name=\"Clone-Netflix\" \n                    linkToRepo=\"https://github.com/R3SP31T4/CloneNetflix\" \n                    fullname=\"R3SP31T4/CloneNetflix\n                    \"/>\n                    ))}\n                    </S.StabPanel>\n                    <S.StabPanel>\n                    {githubState.repositories.map(item => (\n                    <RepositoryItem \n                    key={item.id} \n                    name=\"Clone-Netflix\" \n                    linkToRepo=\"https://github.com/R3SP31T4/CloneNetflix\" \n                    fullname=\"R3SP31T4/CloneNetflix\n                    \"/>\n                    ))}\n                        <RepositoryItem/>\n                    </S.StabPanel>\n                </S.StabList>\n            </S.Stabs>\n        ):(\n            <> </>\n        )}\n        </>\n\n       \n    )\n};\nexport default Repositories;\n"]},"metadata":{},"sourceType":"module"}